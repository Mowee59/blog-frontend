# Workflow name
name: Deployment workflow

# Trigger the workflow on push to the main branch
on:
  push:
    branches:
      - main

# Environment variables used throughout the workflow
env:
  REGISTRY: ghcr.io # GitHub Container Registry
  IMAGE_NAME: ${{ github.repository_owner }}/${{ github.event.repository.name }} # Format: owner/repo-name

# Define the jobs to run tests, then build and push the Docker image, and finally deploy
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20" # Adjust this to your project's Node.js version

      - name: Install dependencies
        run: yarn install

      - name: Run tests
        run: yarn test

  versioning:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      last_release_version: ${{ steps.semantic.outputs.last_release_version }}
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push:
    needs: versioning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Output git-tag for debugging
        run: echo " ${{ needs.versioning.outputs.git-tag }}"

      # Step 2: Convert the repository name and owner to lowercase
      - name: Lowercase the repo name and owner
        run: |
          echo "REPO_LOWER=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
          echo "OWNER_LOWER=${GITHUB_REPOSITORY_OWNER,,}" >>${GITHUB_ENV}

      # Step 3: Log in to the GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # GitHub username running the workflow
          password: ${{ secrets.GITHUB_TOKEN }} # Automatically provided GitHub token

      # Step 4: Extract metadata (tags, labels) for Docker
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER_LOWER }}/${{ github.event.repository.name }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.versioning.outputs.new_release_published == 'true' && needs.versioning.outputs.new_release_version || needs.versioning.outputs.last_release_version }}

      # Step 5: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'status' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push # This job will only run if the build-and-push job succeeds
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to VPS
        env:
          VPS_SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_SSH_PORT: ${{ secrets.VPS_SSH_PORT }}
        run: |
          echo "$VPS_SSH_PRIVATE_KEY" > vps_ssh_key
          chmod 600 vps_ssh_key
          ssh -i vps_ssh_key -p $VPS_SSH_PORT -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST '
            cd /home/torka/monSite &&  docker-compose up -d
          '
          rm vps_ssh_key
