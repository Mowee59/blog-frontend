# Workflow name
name: Test, Build, Push, and Deploy Docker Image

# Trigger the workflow on push to the main branch
on:
  push:
    branches:
      - main

# Environment variables used throughout the workflow
env:
  REGISTRY: ghcr.io # GitHub Container Registry
  IMAGE_NAME: ${{ github.repository_owner }}/${{ github.event.repository.name }} # Format: owner/repo-name

# Define the jobs to run tests, then build and push the Docker image, and finally deploy
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20" # Adjust this to your project's Node.js version

      - name: Install dependencies
        run: yarn install

      - name: Run tests
        run: yarn test

  build-and-push:
    needs: test # This job will only run if the test job succeeds
    runs-on: ubuntu-latest
    permissions:
      contents: read # Permission to read repository contents
      packages: write # Permission to write packages (for pushing Docker images)

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Convert the repository name and owner to lowercase
      - name: Lowercase the repo name and owner
        run: |
          echo "REPO_LOWER=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
          echo "OWNER_LOWER=${GITHUB_REPOSITORY_OWNER,,}" >>${GITHUB_ENV}
      # Step 3: Get version from package.json
      - name: Get version from package.json
        id: package-version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      # Step 4: Log in to the GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # GitHub username running the workflow
          password: ${{ secrets.GITHUB_TOKEN }} # Automatically provided GitHub token

      # Step 5: Extract metadata for Docker
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER_LOWER }}/${{ github.event.repository.name }}

      # Step 6: Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: . # Build context is the root of the repository
          push: ${{ github.event_name != 'status' }} # Push the image to the registry only if not running a status check
          tags: | # Tags for the Docker image
            ${{ env.REGISTRY }}/${{ env.OWNER_LOWER }}/${{ github.event.repository.name }}:latest
            ${{ env.REGISTRY }}/${{ env.OWNER_LOWER }}/${{ github.event.repository.name }}:${{ steps.package-version.outputs.VERSION }}
          labels: ${{ steps.meta.outputs.labels }} # Labels extracted in the previous step

  deploy:
    needs: build-and-push # This job will only run if the build-and-push job succeeds
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to VPS
        env:
          VPS_SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_SSH_PORT: ${{ secrets.VPS_SSH_PORT }}
        run: |
          echo "$VPS_SSH_PRIVATE_KEY" > vps_ssh_key
          chmod 600 vps_ssh_key
          ssh -i vps_ssh_key -p $VPS_SSH_PORT -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST '
            cd /home/torka/monSite &&  docker-compose up -d
          '
          rm vps_ssh_key