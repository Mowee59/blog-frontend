# Workflow name
name: Build and Push Docker Image

# Trigger the workflow on push to the main branch
on:
  push:
    branches:
      - main

# Environment variables used throughout the workflow
env:
  REGISTRY: ghcr.io  # GitHub Container Registry
  IMAGE_NAME: ${{ github.repository_owner }}/${{ github.event.repository.name }}  # Format: owner/repo-name

# Define the job to build and push the Docker image
jobs:
  build-and-push:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    permissions:
      contents: read  # Permission to read repository contents
      packages: write  # Permission to write packages (for pushing Docker images)

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Convert the repository name to lowercase (GitHub package names must be lowercase)
      - name: Lowercase the repo name
        run: echo "REPO_LOWER=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      # Step 3: Log in to the GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}  # GitHub username running the workflow
          password: ${{ secrets.GITHUB_TOKEN }}  # Automatically provided GitHub token

      # Step 4: Extract metadata for Docker
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Step 5: Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .  # Build context is the root of the repository
          push: true  # Push the image to the registry
          tags: |  # Tags for the Docker image
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}  # Labels extracted in the previous step